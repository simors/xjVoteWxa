<style type="less">
  .counter-down {
    background: #fff;
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
    margin: 5px 12px;
    padding: 5px 0;
  }

  .counter-view {
    display: flex;
    justify-content: center;
  }

  .num-vew {
    background: #37c6c0;
    border-radius: 2px;
    color: #fff;
    padding: 2px 4px;
    min-width: 14px;
    margin-left: 5px;
    margin-right: 5px;
    text-align: center;
    line-height: 1;
  }

  .tip-text {
    display: flex;
    align-items: center;
  }
</style>

<template>
  <view>
    <view wx:if="{{beginCounter > 0}}" class="counter-down">
      <text class="zan-font-12 zan-c-red zan-font-bold">活动于</text>
      <view class="counter-view">
        <view class="num-vew">
          {{counter.days}}
        </view>
        <text class="zan-font-12 zan-c-gray-dark tip-text">天</text>
        <view class="num-vew">
          {{counter.hours}}
        </view>
        <text class="zan-font-12 zan-c-gray-dark tip-text">时</text>
        <view class="num-vew">
          {{counter.mins}}
        </view>
        <text class="zan-font-12 zan-c-gray-dark tip-text">分</text>
        <view class="num-vew">
          {{counter.secs}}
        </view>
        <text class="zan-font-12 zan-c-gray-dark tip-text">秒</text>
      </view>
      <text class="zan-font-12 zan-c-red zan-font-bold">后结束</text>
    </view>
    <view wx:elif="{{beginCounter < 0}}" class="counter-down">
      <text class="zan-font-20 zan-c-red zan-font-bold">活动已结束</text>
    </view>
    <view wx:else class="counter-down">
      <text class="zan-font-20 zan-c-red zan-font-bold">正在加载</text>
    </view>
  </view>
</template>

<script>
  import wepy from 'wepy'

  export default class TimerCounterDown extends wepy.component {
    props = {
      beginCounter: {
        type: Number,
        default: 0
      },
    }

    data = {
      counter: {
        days: 0,
        hours: 0,
        mins: 0,
        secs: 0
      },
      timer: null
    }

    watch = {
      'beginCounter': (newValue, oldValue) => {
        if (this.timer) {
          clearInterval(this.timer)
        }
        if (this.beginCounter > 0) {
          this.timer = setInterval(() => {
            newValue--
            this.counter = this.calCounter(newValue)
            this.$apply()
          }, 1000)
        }
      }
    }

    methods = {
      clearTimer() {
        if (this.timer) {
          clearInterval(this.timer)
        }
      }
    }

    onLoad() {
      if (this.timer) {
        clearInterval(this.timer)
      }
      if (this.beginCounter > 0) {
        this.timer = setInterval(() => {
          this.beginCounter--
          this.counter = this.calCounter(this.beginCounter)
          this.$apply()
        }, 1000)
      }
    }

    onUnload() {
      this.clearTimer()
    }

    calCounter(count) {
      const oneday = 24 * 60 * 60
      const onehour = 60 * 60
      const onemin = 60
      let days = parseInt(count / oneday)
      if (days < 10) {
        days = '0' + days
      }
      let hours = parseInt((count - days * oneday) / onehour)
      if (hours < 10) {
        hours = '0' + hours
      }
      let mins = parseInt((count - days * oneday - hours * onehour) / onemin)
      if (mins < 10) {
        mins = '0' + mins
      }
      let secs = count - days * oneday - hours * onehour - mins * 60
      if (secs < 10) {
        secs = '0' + secs
      }
      return {
        days,
        hours,
        mins,
        secs
      }
    }
  }
</script>
