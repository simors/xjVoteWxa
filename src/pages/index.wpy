<style lang="less">
  @import "../styles/base.less";
  @import "../minui/wxc-flex.wxss";
  @import "../minui/wxc-list.less";

  .toolbar-image {
    width: 24px;
    height: 24px;
    margin-bottom: 2px;
  }
</style>
<template>
  <view class="container has-toolbar">
    <view class="list--wrap">
      <repeat for="{{votes}}" key="index" index="index" item="item">
        <voteBrief :vote="item"></voteBrief>
      </repeat>
    </view>

    <view style="height: 120rpx; background: transparent"/>

    <view class="toolbar toolbar-bottom">
      <view class="flex flex-column items-center justify-center">
        <image class="toolbar-image" src="../asset/png/home_sel.png" mode="aspectFill" />
        <view class="toolbar-fontsize-selected">主页</view>
      </view>
      <navigator class="flex flex-column items-center justify-center" url="./publish/publish">
        <image class="toolbar-image" style="width: 32px; height: 32px;" src="../asset/png/publish.png" mode="aspectFill" />
      </navigator>
      <navigator class="flex flex-column items-center justify-center" url="./mine/mine">
        <image class="toolbar-image" src="../asset/png/mine.png" mode="aspectFill" />
        <view class="toolbar-fontsize">我的</view>
      </navigator>
    </view>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import Tips from '../utils/Tips';
  import VoteBrief from '@/components/VoteBrief';
  import cloud from '@/cloud/vote';

  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '小吉互动'
    };
    components = {
      voteBrief: VoteBrief
    };
    data = {
      votes: []
    };
    computed = {};
    methods = {};
    events = {};

    async onLoad() {
      Tips.loading();
      await this.$parent.getUserInfo();
      this.votes = await this.fetchVotes();
      Tips.loaded();

      this.$apply()
    }

    onShareAppMessage() {
      const title = '小吉互动';
      const url = '/pages/index';
      return Tips.share(title, url, title);
    }

    async onPullDownRefresh() {
      this.votes = await this.fetchVotes();
      wx.stopPullDownRefresh();
      this.$apply();
    }

    async fetchVotes() {
      const payload = {
        status: [cloud.VOTE_STATUS.WAITING, cloud.VOTE_STATUS.STARTING, cloud.VOTE_STATUS.DONE],
        orderedBy: 'createdAt',
        limit: 10
      };
      const votes = await cloud.fetchVotes(payload);
      this.votes = votes;
      return votes;
    }
  }
</script>
