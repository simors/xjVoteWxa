<style lang="less">
  @import "../../styles/base.less";
  @import "../../minui/wxc-flex.wxss";
  @import "../../zanui/color.wxss";

  .list--wrap {
    padding: 0;
  }

  .list__head {
    padding: 30rpx 30rpx 0;
    text-align: center;
    &--title {
      display: inline-block;
      padding: 0 40rpx 10rpx 40rpx;
      font-size: 32rpx;
      color: #9B9B9B;
    }
    &--line {
      margin: 0 auto;
      width: 150rpx;
      height: 2rpx;
      background-color: #D8D8D8;
    }
    &--desc {
      padding-top: 13rpx;
      color: #BEBEBE;
      font-size: 26rpx;
    }
  }

  .list__foot {
    margin: 100rpx 0 30rpx 0;
    text-align: center;
    color: #1aad19;
    font-size: 0;
    &--icon {
      width: 152rpx;
      height: 23rpx;
    }
  }

  .list-item--wrap {
    overflow: hidden;
    border-bottom: 1rpx solid rgba(0,0,0,0.08);
    background: #fff;
  }

  .list-item {
    max-height: 800rpx;
    overflow: hidden;
  }

  .list-item-meta {
    padding: 10rpx 24rpx 40rpx 24rpx;
  }

  .list-item-meta-title {
    padding: 12rpx 0;
    font-size: 40rpx;
    font-weight: 500;
    color: #555;
    border-radius: 8rpx;
    transition: background-color .4s ease;
  }

  .list-item-meta-desc {
    background: rgba(0,0,0,0.02);
    border: 1rpx solid rgba(0,0,0,0.08);
    border-radius: 10rpx;
    padding: 9rpx 0;

    image {
      height: 48rpx;
      width: 48rpx;
      margin-right: 24rpx;
    }
  }

  .card {
    margin-left: 0px;
    width: auto;
    padding: 5px 15px;
    overflow: hidden;
    /*position: relative;*/
    font-size: 14px;
    display: flex;
    align-items: center;
  }

  .card__thumb {
    height: 240rpx;
    margin-right: 24rpx;
    overflow: hidden;
    background-size: cover;
    flex: 0 0 240rpx;
  }

  .card__img {
    max-width: 100%;
    max-height: 100%;
  }

  .card__detail {
    width: auto;
    flex: 1 1 auto;
  }

  .card__detail-row {
    display: flex;
    justify-content: space-between;
    overflow: hidden;
    line-height: 20px;
    min-height: 20px;
    margin-bottom: 3px;
  }

  .ellipsis--l2 {
    max-height: 40px;
    line-height: 20px;
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
  }

  .loadmore {
    display: flex;
    width: 100%;
    height: 92rpx;
    justify-content: center;
    align-items: center;

    &__line {
      width: 100rpx;
      height: 1rpx;
      border-top: 1rpx solid #d2d2d2;
    }

    &__icon {
      width: 32rpx;
      height: 32rpx;
      margin-left: 16rpx;
    }

    &__text {
      margin: 0 16rpx 0 8rpx;
      color: #999;
      font-size: 28rpx;
    }

    &__wrap {
      color: #999;
      font-size: 28rpx;
      display: flex;
      justify-content: center;
      align-items: center;
    }

    &__loading-icon {
      width:30px;
      height:30px;
      margin-right: 8px;
      display: inline-block;
      vertical-align: middle;
      animation: weuiLoading 1s steps(12, end) infinite;
      -webkit-background-size: 100%;
      background-size: 100%;
    }

    &__loading-text {
      display: inline-block;
      vertical-align: middle;
      margin-left: 8rpx;
    }
  }
</style>
<template>
  <view class="container has-toolbar">
    <view class="list--wrap">
      <view wx:key="id" wx:for="{{votes}}" wx:for-item="vote" class="list-item--wrap">
        <view class="card" @tap.stop="showVoteDetail({{vote.id}}, {{vote.status}})" @longpress="deleteVote({{vote.id}}, {{vote.title}})">
          <view class="card__thumb">
            <image wx:if="{{vote.cover}}" class="card__img" src="{{vote.cover}}" mode="aspectFill"/>
            <image wx:if="{{vote.coverSet[0]}}" class="card__img" src="{{vote.coverSet[0]}}" mode="aspectFill"/>
          </view>
          <view class="card__detail">
            <view class="card__detail-row">
              <view class="zan-font-16 zan-font-bold ellipsis--l2">
                {{vote.title}}
              </view>
            </view>
            <view class="card__detail-row zan-c-gray-darker">
              <view>
                热度：{{vote.pv}}
              </view>
            </view>
            <view class="card__detail-row zan-c-gray-darker">
              <view>
                收益：¥ {{vote.profit}}
              </view>
            </view>
            <view class="card__detail-row zan-c-gray-darker">
              <text>{{vote.displayDate}}</text>
              <text wx:if="{{vote.status === 1}}" class="zan-c-orange">正在编辑</text>
              <text wx:elif="{{vote.status === 2}}" class="zan-c-purple">待支付</text>
              <text wx:elif="{{vote.status === 3}}" class="zan-c-red">未开始</text>
              <text wx:elif="{{vote.status === 4}}" class="zan-c-green">正在进行</text>
              <text wx:elif="{{vote.status === 5}}" class="zan-c-blue">已结束</text>
              <text wx:elif="{{vote.status === 6}}" class="zan-c-black">已结算</text>
              <text wx:else class="zan-c-red-darker">未知</text>
            </view>
          </view>
        </view>
      </view>
    </view>

    <zanToptips/>

    <view class="loadmore">
      <view wx:if="{{loading}}" class="loadmore__wrap">
        <image class="loadmore__loading-icon" src="../../asset/png/loading.png"></image>
        <text class="loadmore__loading-text">加载中...</text>
      </view>
      <block wx:elif="{{!moreVotes}}">
        <view class="loadmore__line"></view>
        <text class="loadmore__text">到底啦</text>
        <view class="loadmore__line"></view>
      </block>
    </view>
  </view>
</template>

<script>
  import wepy from 'wepy';
  import Tips from '@/utils/Tips';
  import DateTime from '@/utils/dateTime';
  import cloud from '@/cloud/vote';
  import vote from '../../cloud/vote'
  import zanToptips from '../../components/zan-toptips'

  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '我的投票'
    };
    components = {
      zanToptips
    };
    data = {
      votes: [],
      loading: false,
      moreVotes: false,
      userInfo: null,
      royalty: 0
    };
    computed = {};
    methods = {
      showVoteDetail (id, status) {
        if (status === cloud.VOTE_STATUS.EDITING) {
          wx.navigateTo({
            url: '../publish/publish?voteId=' + id
          })
        } else {
          wx.navigateTo({
            url: '../vote/index?voteId=' + id
          })
        }
      },

      async deleteVote(id, title) {
        try {
          await Tips.confirm('确定要删除《'+title+"》吗？")
          await vote.setVoteDisable({voteId: id, disable: true})
          this.delVoteInList(id)
        } catch (e) {

        }
      }
    };

    events = {};

    async onLoad() {
      this.loading = true;
      this.userInfo = await this.$parent.getUserInfo();
      if (this.userInfo.agentLevel === 1) {
        this.royalty = 0.2
      } else if (this.userInfo.agentLevel === 2) {
        this.royalty = 0.35
      } else if (this.userInfo.agentLevel === 3) {
        this.royalty = 0.4
      } else if (this.userInfo.agentLevel === 4) {
        this.royalty = 0.45
      }
      this.votes = await this.refreshVotes();
      this.loading = false;
      this.$apply();

      setTimeout(() => {
        this.$invoke('zanToptips', 'showZanTopTips', { content: '长按可删除投票活动', options: 3000 })
      }, 1000)
    }

    delVoteInList(voteId) {
      let pos = this.votes.findIndex((vote) => vote.id === voteId)
      this.votes.splice(pos, 1)
      this.$apply()
    }

    onShareAppMessage() {
      const title = '小吉互动';
      const url = '/pages/index';
      return Tips.share(title, url, title);
    }

    async onPullDownRefresh() {
      this.votes = await this.refreshVotes();
      wx.stopPullDownRefresh();
      this.$apply();
    }

    async onReachBottom() {
      this.loading = true;
      const moreVotes = await this.fetchMoreVotes();
      this.loading = false;
      if (moreVotes.length === 0) {
        this.moreVotes = false;
        this.$apply();
        return;
      }

      this.moreVotes = true;
      this.votes.push(...moreVotes);
      this.$apply();
    }

    async refreshVotes() {
      const payload = {
        searchType: cloud.VOTE_SEARCH_TYPE.PERSONAL,
        orderedBy: 'createdAt',
        limit: 10
      };
      const rawVotes = await cloud.fetchVotes(payload);
      const votes = [];
      for (const i of rawVotes) {
        const vote = {
          ...i,
          displayDate: i.createdAt.split(' ')[0],
          profit: (i.profit * this.royalty).toFixed(2)
        };
        votes.push(vote);
      }
      return votes;
    }

    async fetchMoreVotes() {
      if (this.votes.length === 0) {
        return [];
      }

      const lastVote = this.votes[this.votes.length - 1];
      const lastCreatedAt = lastVote.createdAt;
      const payload = {
        searchType: cloud.VOTE_SEARCH_TYPE.PERSONAL,
        orderedBy: 'createdAt',
        lastTime: lastCreatedAt,
        limit: 10
      };

      const rawVotes = await cloud.fetchVotes(payload);
      const votes = [];
      for (const i of rawVotes) {
        const vote = {
          ...i,
          displayDate: i.createdAt.split(' ')[0],
          profit: (i.profit * this.royalty).toFixed(2)
        };
        votes.push(vote);
      }
      return votes;
    }
  }
</script>
