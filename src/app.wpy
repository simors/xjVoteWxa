<style lang="less">
  @import "./styles/vars.less";
  @import "./styles/base.less";
  @import "./zanui/index.wxss";

  .container {
    background: #fff;
    overflow: hidden;
    min-height: 100vh;
    box-sizing: border-box;
    overflow-x: hidden;
  }

  .container::before {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    background-color: #e2e2e2;
    z-index: 5;
  }

  .vote-btn {
    border-color: @color-primary;
    background-image: linear-gradient(136deg, #FF9087 0%, #F8635B 100%);
    border-radius: 10rpx;
  }
</style>

<script>
import wepy from 'wepy'
import 'wepy-async-function'
import AV from './utils/av-weapp-min'
import user from './cloud/user'
import vote from './cloud/vote'

// DEV
AV.init({
  appId: 'AeOiTsPVUSMd8jfNqungDRq1-gzGzoHsz',
  appKey: '973RYHKEl1oFwbC2VMJXuQ4X',
})

// PROD
//AV.init({
//  appId: 'L3Cae9l7aornoukXME6ycMFD-gzGzoHsz',
//  appKey: 'lH7LPYtJJLJjMnz2MHWrCmKz',
//})

export default class extends wepy.app {
  config = {
    pages: [
      'pages/index',
      'pages/mine/mine',
      'pages/mine/wallet',
      'pages/mine/withdraw',
      'pages/mine/vote',
      'pages/mine/agent',
      'pages/mine/invite',
      'pages/publish/publish',
      'pages/publish/publishType',
      'pages/vote/index',
      'pages/vote/award',
      'pages/vote/apply',
      'pages/vote/rank',
      'pages/vote/player',
      'pages/vote/present',
      'pages/vote/manPlayers',
      'pages/vote/searchPlayer',
      'pages/vote/contact'
    ],
    window: {
      navigationBarTitleText: '小吉互动',
      navigationBarBackgroundColor: '#F6635F',
      navigationBarTextStyle: 'white',
      backgroundColor: '#F8F8F8',
      enablePullDownRefresh: true
    },
    debug: true
  }

  globalData = {
    userInfo: null,
    editVote: {
      id: null,
      type: null,
      title: null,
      cover: null,
      notice: null,
      rule: null,
      organizer: null,
      awards: null,
      gifts: null,
      endDate: null,
      status: null
    },
    lastVote: '',
    activeVote: null,
    votes: [],
    players: []
  }

  constructor () {
    super()
    this.use('requestfix')
    this.use('promisify')
  }

  async onLaunch() {
    this.globalData.lastVote = JSON.stringify(this.globalData.editVote)
    this.saveVoteTimer()
    this.calVoteCounter()
  }

  async saveVoteDraft() {
    if (this.globalData.lastVote !== JSON.stringify(this.globalData.editVote)  && this.globalData.editVote.cover) {
      this.globalData.editVote.status = vote.VOTE_STATUS.EDITING
      let voteInfo = await vote.createOrUpdateVote(this.globalData.editVote)
      this.globalData.editVote.id = voteInfo.objectId
      this.globalData.lastVote = JSON.stringify(this.globalData.editVote)
    }
  }

  calVoteCounter() {
    setInterval(() => {
      let activeVote = this.globalData.activeVote
      if (activeVote && activeVote.counter && activeVote.counter > 0) {
        this.globalData.activeVote.counter--
      }
    }, 1000)
  }

  saveVoteTimer() {
    setInterval(() => {
      this.saveVoteDraft()
    }, 10000)
  }

  async getUserInfo() {
    let userInfo = this.globalData.userInfo
    if (userInfo) {
      return userInfo
    }
    let wepyUser = await user.userLogin()
    this.globalData.userInfo = wepyUser
    return wepyUser
  }

  clearVoteInfo() {
    this.globalData.editVote.id = null
    this.globalData.editVote.type = null
    this.globalData.editVote.title = null
    this.globalData.editVote.cover = null
    this.globalData.editVote.notice = null
    this.globalData.editVote.rule = null
    this.globalData.editVote.organizer = null
    this.globalData.editVote.awards = null
    this.globalData.editVote.gifts = null
    this.globalData.editVote.startDate = null
    this.globalData.editVote.expire = null
    this.globalData.editVote.status = null

    this.globalData.lastVote = JSON.stringify(this.globalData.editVote)
  }

  initVoteInfo(voteInfo) {
    this.globalData.editVote.id = voteInfo.id
    this.globalData.editVote.type = voteInfo.type
    this.globalData.editVote.title = voteInfo.title
    this.globalData.editVote.cover = voteInfo.cover
    this.globalData.editVote.notice = voteInfo.notice
    this.globalData.editVote.rule = voteInfo.rule
    this.globalData.editVote.organizer = voteInfo.organizer
    this.globalData.editVote.awards = voteInfo.awards
    this.globalData.editVote.startDate = voteInfo.startDate
    this.globalData.editVote.expire = voteInfo.expire
    this.globalData.editVote.status = voteInfo.status
    if (voteInfo.gifts.length > 0) {
      this.globalData.editVote.gifts = []
      voteInfo.gifts.forEach((gift) => {
        this.globalData.editVote.gifts.push(gift.id)
      })
    }

    this.globalData.lastVote = JSON.stringify(this.globalData.editVote)
  }

  getGlobalPlayer(playerId) {
    let players = this.globalData.players
    let player = players.find((value) => value.id === playerId)
    return player
  }

  getGlobalPlayerIndex(playerId) {
    let players = this.globalData.players
    let index = players.findIndex((value) => value.id === playerId)
    return index
  }

  saveGlobalPlayers(newPlayers) {
    newPlayers.forEach((player) => {
      let pos = this.getGlobalPlayerIndex(player.id)
      if (pos >= 0) {
        this.globalData.players[pos] = player
      } else {
        this.globalData.players.push(player)
      }
    })
  }

  async reloadActiveVote() {
    let voteId = this.globalData.activeVote.id
    let voteInfo = await vote.fetchVoteInfoById({voteId: voteId, updateStatus: true})
    this.globalData.activeVote = voteInfo
  }

  async reloadUserInfo() {
    let userId = this.globalData.userInfo.id
    if (!userId) {
      return
    }
    this.globalData.userInfo = await user.fetchUserInfo({userId})
  }
}
</script>
